package com.example.Movie.API.Service.Impl;

import io.minio.GetObjectArgs;
import io.minio.MinioClient;
import io.minio.PutObjectArgs;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.nio.file.Files;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
@Log4j2
public class HlsServiceImpl {

  @Value("${spring.video.output-dir}")
  private String baseOutputDir;

  @Value("${spring.ffmpeg.path}")
  private String ffmpegPath;

  @Value("${spring.minio.bucket-name}")
  private String bucketName;

  private final MinioClient minioClient;

  public HlsServiceImpl(MinioClient minioClient) {
    this.minioClient = minioClient;
  }

  private String convertMp4ToHls(String inputPath, String outputDir) throws IOException, InterruptedException {
    File inputFile = new File(inputPath);
    if (!inputFile.exists()) {
      throw new IOException("‚ùå File kh√¥ng t·ªìn t·∫°i: " + inputPath);
    }

    // Adaptive Bitrate (ABR) - T·∫°o nhi·ªÅu ƒë·ªô ph√¢n gi·∫£i
    String command = String.format(
            "%s -i %s " +
                    "-map 0:v -map 0:a " +
                    "-b:v:0 800k -s:v:0 640x360 " +
                    "-b:v:1 1200k -s:v:1 1280x720 " +
                    "-b:v:2 2500k -s:v:2 1920x1080 " +
                    "-c:v libx264 -preset fast -crf 23 -c:a aac -b:a 128k " +
                    "-hls_time 10 -hls_list_size 0 -f hls %s/output.m3u8",
            ffmpegPath, inputPath, outputDir
    );

    log.info("‚öôÔ∏è ƒêang ch·∫°y FFmpeg: {}", command);

    // Ch·∫°y l·ªánh theo OS
    ProcessBuilder builder;
    if (System.getProperty("os.name").toLowerCase().contains("win")) {
      builder = new ProcessBuilder("cmd.exe", "/c", command);
    } else {
      builder = new ProcessBuilder("/bin/sh", "-c", command);
    }

    builder.redirectErrorStream(true);
    Process process = builder.start();

    // ƒê·ªçc log t·ª´ FFmpeg
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
      String line;
      while ((line = reader.readLine()) != null) {
        log.info(line);
      }
    }

    int exitCode = process.waitFor();
    if (exitCode != 0) {
      throw new IOException("‚ùå FFmpeg l·ªói! M√£ l·ªói: " + exitCode);
    }

    log.info("‚úÖ HLS t·∫°o th√†nh c√¥ng: {}/output.m3u8", outputDir);
    return outputDir.replace("/tmp/videos/", "") + "/output.m3u8";
//    return outputDir + "/output.m3u8";
  }

  private void uploadFolderToMinIO(File folder, String minioFolder) {
    if (!folder.exists() || !folder.isDirectory()) {
      log.error("‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {}", folder.getAbsolutePath());
      return;
    }

    File[] files = folder.listFiles();
    if (files == null) {
      log.error("‚ùå Kh√¥ng t√¨m th·∫•y file n√†o trong th∆∞ m·ª•c: {}", folder.getAbsolutePath());
      return;
    }

    for (File file : files) {
      try (InputStream inputStream = new FileInputStream(file)) {
        log.info("üì§ Upload file: {} l√™n MinIO...", file.getName());
        minioClient.putObject(
                PutObjectArgs.builder()
                        .bucket(bucketName)
                        .object(minioFolder + "/" + file.getName())
                        .stream(inputStream, file.length(), -1)
                        .contentType(Files.probeContentType(file.toPath()))
                        .build()
        );
        log.info("‚úÖ Upload th√†nh c√¥ng: {}", file.getName());
      } catch (Exception e) {
        log.error("‚ùå L·ªói upload {}: {}", file.getName(), e.getMessage());
      }
    }
  }

public String updateM3U8File(String bucketName, String path) {
  try {
    // L·∫•y th∆∞ m·ª•c c·ªßa file .m3u8
    String videoFolder = new File(path).getParentFile().getName();

    InputStream stream = minioClient.getObject(GetObjectArgs.builder()
            .bucket(bucketName)
            .object(path)
            .build());

    List<String> lines = new BufferedReader(new InputStreamReader(stream))
            .lines()
            .collect(Collectors.toList());

    // T·∫°o base URL d·ª±a tr√™n videoFolder
    String baseUrl = "http://192.168.100.193:8082/api/videos/hls-stream?bucketName="
            + bucketName + "&path=" + videoFolder + "/";

    String updatedContent = lines.stream()
            .map(line -> line.endsWith(".ts") ? baseUrl + line : line)
            .collect(Collectors.joining("\n"));

    return updatedContent;
  } catch (Exception e) {
    log.error("Error updating M3U8 file: {}", e.getMessage());
    return null;
  }
}

  public String uploadFile(MultipartFile file) {
    try {
      // Ki·ªÉm tra v√† l·∫•y t√™n file g·ªëc
      String originalFileName = file.getOriginalFilename();
      if (originalFileName == null || !originalFileName.toLowerCase().endsWith(".mp4")) {
        throw new IllegalArgumentException("‚ùå Ch·ªâ h·ªó tr·ª£ upload file .mp4");
      }

      // L·∫•y t√™n file kh√¥ng c√≥ ph·∫ßn m·ªü r·ªông
      String fileNameWithoutExt = originalFileName.replace(".mp4", "");
      File videoDir = new File(baseOutputDir, fileNameWithoutExt);

      // T·∫°o th∆∞ m·ª•c ch·ª©a video n·∫øu ch∆∞a t·ªìn t·∫°i
      if (!videoDir.exists() && !videoDir.mkdirs()) {
        throw new IOException("‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: " + videoDir);
      }

      // L∆∞u file video v√†o th∆∞ m·ª•c
      File savedFile = new File(videoDir, originalFileName);
      file.transferTo(savedFile);
      log.info("‚úÖ Video ƒë√£ l∆∞u: {}", savedFile.getAbsolutePath());

      // Chuy·ªÉn ƒë·ªïi video sang HLS
      String hlsOutputPath = convertMp4ToHls(savedFile.getAbsolutePath(), videoDir.getAbsolutePath());

      // Upload th∆∞ m·ª•c ch·ª©a HLS l√™n MinIO
      uploadFolderToMinIO(videoDir, fileNameWithoutExt);

      // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file M3U8 ƒë√£ t·∫°o
      return hlsOutputPath;
    } catch (IllegalArgumentException e) {
      log.warn("‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng file: {}", e.getMessage());
      return "ERROR: " + e.getMessage();
    } catch (IOException e) {
      log.error("‚ùå L·ªói khi x·ª≠ l√Ω file: {}", e.getMessage(), e);
      return "ERROR: Kh√¥ng th·ªÉ x·ª≠ l√Ω file.";
    } catch (Exception e) {
      log.error("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi upload file: {}", e.getMessage(), e);
      return "ERROR: ƒê√£ x·∫£y ra l·ªói.";
    }
  }


}


